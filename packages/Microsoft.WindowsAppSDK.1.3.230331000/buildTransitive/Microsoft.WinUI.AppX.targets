<!--
  Copyright (c) Microsoft Corporation. Licensed under the MIT License
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!-- NOTE: standalone Microsoft.WinUI.nupkg appx registration targets are for internal testing use only -->
    <Target Name="_GetPathToXAMLWinRTImplementations"
          BeforeTargets="_ReplaceMUXWinRTRegistrations"
          Returns="$(PathToXAMLWinRTImplementations)"
          Condition="'$(WindowsAppSDKWinUI)'!='true' and '$(PathToXAMLWinRTImplementations)'=='' and ('$(MSBuildProjectExtension)'=='.wapproj' or '$(UsingMicrosoftNetSdk)' == 'true')">
      <PropertyGroup>
        <_MuxDll>microsoft.ui.xaml.dll</_MuxDll>
        <_MuxDllRidLocation>runtimes\$(_WinUIRuntimeIdentifier)\native\microsoft.ui.xaml.dll</_MuxDllRidLocation>
        <_EntryPointProjectName>$([System.IO.Path]::GetFileNameWithoutExtension('$(EntryPointProjectFullPath)'))</_EntryPointProjectName>
      </PropertyGroup>
      <ItemGroup>
        <_WinUINativeItemsFiltered Remove="@(_WinUINativeItemsFiltered)"/>

        <_WinUINativeItemsFiltered Include="@(AppxPackagePayload)" Condition="$([System.String]::new('%(Identity)').EndsWith('Microsoft.UI.Xaml.dll', StringComparison.OrdinalIgnoreCase))"/>
        <_WinUINativeItemsFiltered Remove="@(_WinUINativeItemsFiltered)"
                                   Condition="'%(_WinUINativeItemsFiltered.OutputType)'!='Exe' and '%(_WinUINativeItemsFiltered.OutputType)'!='WinExe' and '%(_WinUINativeItemsFiltered.OutputGroup)'!='PublishItemsOutputGroupOutput'"/>

        <!--
          If we're part of a packaged desktop app that is debug builds, this project won't be published, so it will run using the shared framework (not self-contained),
          and will in turn, deploy all architectures of the WinUI assemblies along with the app.
        -->
        <_MuxItemFiltered Include="@(_WinUINativeItemsFiltered)"
            Condition="$(_MuxDll.Equals('%(TargetPath)', StringComparison.OrdinalIgnoreCase)) or $(_MuxDllRidLocation.Equals('%(TargetPath)', StringComparison.OrdinalIgnoreCase))"/>
      </ItemGroup>

      <!-- Fallback to DestinationSubDirectory if TargetPath check doesn't work for the packaging project -->
      <ItemGroup Condition="'$(MSBuildProjectExtension)'=='.wapproj' and '@(_MuxItemFiltered->Count())' &lt; 1">
        <_EntryPointItems Include="@(_WinUINativeItemsFiltered->WithMetadataValue('SourceProject','$(_EntryPointProjectName)'))"/>
        <_MuxItemFiltered Include="@(_EntryPointItems)" Condition="'%(_EntryPointItems.DestinationSubDirectory)'==''"/>
        <_MuxItemFiltered Include="@(_EntryPointItems)" Condition="'@(_MuxItemFiltered->Count())' &lt; 1 and '%(_EntryPointItems.DestinationSubDirectory)'=='runtimes\$(_WinUIRuntimeIdentifier)\native\'"/>
      </ItemGroup>

      <!-- This will only happen if there are multiple .exe's which reference WinUI, which will create duplicate entires in the appxmanifest -->
      <Error Text="App packages with mulitple WinUI exes is not supported. To override this, set the PathToXAMLWinRTImplementations property."
             Condition="'@(_MuxItemFiltered->Count())' &gt; 1" />

      <PropertyGroup>
        <_XamlItemTargetPath>@(_MuxItemFiltered->'%(TargetPath)')</_XamlItemTargetPath>
        <!-- Make the path lowerscase so the comparison will succeed -->
        <_XamlItemTargetPath>$(_XamlItemTargetPath.ToLower())</_XamlItemTargetPath>
        <PathToXAMLWinRTImplementations>$(_XamlItemTargetPath.Substring(0, $(_XamlItemTargetPath.IndexOf('microsoft.ui.xaml.dll'))))</PathToXAMLWinRTImplementations>
      </PropertyGroup>
    </Target>

    <!-- NOTE: standalone Microsoft.WinUI.nupkg appx registration targets are for internal testing use only -->
    <!-- Replaces AppxManifest WinRT registrations for Microsoft.UI.Xaml.dll, post-GenerateAppxManifest. -->
    <!-- Target runs before manifest validation occurs. Requires output file to support incremental builds. -->
    <Target
        Condition="'$(WindowsAppSDKWinUI)'!='true'"
        Name="_ReplaceMUXWinRTRegistrations"
        BeforeTargets="_GenerateAppxPackageRecipeFile;_WireUpCoreRuntime"
        AfterTargets="_CalculateInputsForGenerateAppxPackageRecipe"
        Inputs="$(MSBuildAllProjects);@(_GenerateCurrentProjectAppxManifestInput);@(_GenerateAppxPackageRecipeInput)"
        Outputs="$(FinalAppxManifestName).incremental" >
        <PropertyGroup>
          <WinUIClassRegistrationsDir Condition="'$(WinUIClassRegistrationsDir)' == ''">$(MSBuildThisFileDirectory)</WinUIClassRegistrationsDir>
        </PropertyGroup>
        <ItemGroup>
          <_WinUIAssemblies Include="$(MSBuildThisFileDirectory)..\runtimes\$(_WinUIRuntimeIdentifier)\native\*.dll"/>
        </ItemGroup>
        <PropertyGroup>
          <_WinUIAssembliesAsString>@(_WinUIAssemblies->'%(Filename)%(Extension)',';')</_WinUIAssembliesAsString>
          <_WinUIAssembliesAsString>$(_WinUIAssembliesAsString.ToLower())</_WinUIAssembliesAsString>
        </PropertyGroup>
        <ReplaceMUXWinRTRegistrations
            FullPathToAppxManifest="$(FinalAppxManifestName)"
            FullPathToLiftedXAMLWinRTRegistrations="$(WinUIClassRegistrationsDir)LiftedWinRTClassRegistrations.xml"
            WinUIAssemblies="$(_WinUIAssembliesAsString)"
            PathToXAMLWinRTImplementations="$(PathToXAMLWinRTImplementations)"
         />

         <Touch
            Files="$(FinalAppxManifestName).incremental"
            AlwaysCreate="true"
         />

        <ItemGroup>
          <_WinUIAssemblies Remove="@(_WinUIAssemblies)"/>
        </ItemGroup>
    </Target>

    <UsingTask TaskName="ReplaceMUXWinRTRegistrations" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <FullPathToAppxManifest ParameterType="System.String" Required="true" />
            <FullPathToLiftedXAMLWinRTRegistrations ParameterType="System.String" Required="true" />
            <WinUIAssemblies ParameterType="System.String"  Required="true" />
            <PathToXAMLWinRTImplementations ParameterType="System.String" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Xml" />
            <Using Namespace="System.Reflection" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs"><![CDATA[
                if (File.Exists(FullPathToLiftedXAMLWinRTRegistrations) && File.Exists(FullPathToAppxManifest))
                {
                    // Load AppxManifest.xml
                    XmlDocument appxManifest = new XmlDocument();
                    appxManifest.Load(FullPathToAppxManifest);

                    XmlNamespaceManager namespaceManager = new XmlNamespaceManager(appxManifest.NameTable);
                    namespaceManager.AddNamespace("w", "http://schemas.microsoft.com/appx/manifest/foundation/windows10");

                    // If there exists an existing Extensions node, we'll remove any Microsoft.UI.Xaml.dll, Microsoft.Web.WebView2.Core.dll entry in it
                    // and add the correct DLL mapping. Otherwise, if there doesn't, we'll create one and add it.
                    XmlNode extensionsNode = null;

                    foreach (XmlNode node in appxManifest.DocumentElement.SelectNodes("//w:Package/w:Extensions", namespaceManager))
                    {
                        extensionsNode = node;
                        break;
                    }

                    if (extensionsNode != null)
                    {
                        XmlNodeList xmlNodeList = appxManifest.DocumentElement.SelectNodes("//w:Package/w:Extensions/w:Extension", namespaceManager);

                        // Remove WinUI registrations from the AppxManifest file as we will be inserting the entries ourselves
                        foreach (XmlNode node in xmlNodeList)
                        {
                            XmlNode pathNode = node.SelectSingleNode("w:InProcessServer/w:Path", namespaceManager);
                            string path = Path.GetFileName(pathNode.InnerText).ToLower();
                            if (WinUIAssemblies.Contains(path))
                            {
                                extensionsNode.RemoveChild(node);
                            }
                        }
                    }
                    else
                    {
                        extensionsNode = appxManifest.CreateElement("Extensions", "http://schemas.microsoft.com/appx/manifest/foundation/windows10");
                        appxManifest.DocumentElement.AppendChild(extensionsNode);
                    }

                    // Load correct WinRT registration file created during build.  These entries have the correct implemetation DLLs.
                    XmlDocument newRegistrations = new XmlDocument();
                    newRegistrations.Load(FullPathToLiftedXAMLWinRTRegistrations);
                    XmlNamespaceManager namespaceManager2 = new XmlNamespaceManager(newRegistrations.NameTable);
                    namespaceManager2.AddNamespace("w", "http://schemas.microsoft.com/appx/manifest/foundation/windows10");
                    XmlNodeList newRegistrationNodes = newRegistrations.DocumentElement.SelectNodes("/w:Data/w:Extension", namespaceManager2);

                    // Add entries for all Microsoft.UI.Xaml types in the AppxManifest
                    foreach (XmlNode node in newRegistrationNodes)
                    {
                        // If we have a path to our implementation DLLs, we'll add that here.
                        if (!string.IsNullOrWhiteSpace(PathToXAMLWinRTImplementations))
                        {
                            XmlNode pathNode = node.SelectSingleNode("w:InProcessServer/w:Path", namespaceManager);
                            pathNode.InnerText = PathToXAMLWinRTImplementations + pathNode.InnerText;
                        }
                        XmlNode importNode = extensionsNode.OwnerDocument.ImportNode(node, true);
                        extensionsNode.AppendChild(importNode);
                    }

                    // Save the updated AppxManifest.xml file
                    appxManifest.Save(FullPathToAppxManifest);
                }

            ]]></Code>
        </Task>
    </UsingTask>

  <PropertyGroup>
    <MSBuildWarningsAsMessages>
       $(MSBuildWarningsAsMessages);

       <!-- We don't provide an implementation for Microsoft.winmd, but that's OK, since we're constructing
            our own Extensions entries in AppxManifest.xml. As such, we'll suppress the warning that that would otherwise raise. -->
       APPX1707;
    </MSBuildWarningsAsMessages>
    <MSBuildWarningsAsMessages Condition="'$(MSBuildProjectExtension)' == '.wapproj'">
       $(MSBuildWarningsAsMessages);

       <!-- WAP project files can have class libraries with WinMDs complain that they don't have requisite dependencies present -
            however, due to our custom packaging, they'll be present in the end, so we'll suppress this warning as well. -->
       MSB3268;
    </MSBuildWarningsAsMessages>
  </PropertyGroup>

  <PropertyGroup Condition="'$(EnableMsixTooling)'=='true' and '$(TargetPlatformIdentifier)'=='Windows'">
    <!--
      Suppress warnings about referencing SDKs that target UAP when we're targeting Windows.
      See https://github.com/dotnet/msbuild/issues/6150 for more details.
    -->
    <LogSDKReferenceResolutionErrorsAsWarnings>true</LogSDKReferenceResolutionErrorsAsWarnings>
    <MSBuildWarningsAsMessages>
      $(MSBuildWarningsAsMessages);
      MSB3842;
      MSB3843;
    </MSBuildWarningsAsMessages>
  </PropertyGroup>

  <!-- Packing class libraries in a WAP project can erroneously raise a warning thinking that we've packaged multiple executables.
       We'll suppress that warning, since it's being raised in error. -->
  <Target Name="_UWPReferencesCheck" Condition="'$(MSBuildProjectExtension)' == '.wapproj'" />

  <!--
    Setting default project properties for .NET SDK-style projects
  -->
  <PropertyGroup Condition="'$(UsingMicrosoftNETSdk)' == 'true'">
    <SDKIdentifier>Windows</SDKIdentifier>
    <SDKVersion>10.0</SDKVersion>
    <DefaultLanguage Condition="'$(DefaultLanguage)'==''">en-US</DefaultLanguage>
  </PropertyGroup>

  <!--
    By default, the Nuget targets for .NET projects copy MUI files next to the .dll.
    However, we need them in language-specific locations, so we'll move them there.

    For .NET5 projects, this is only a problem when building a self-contained app.
    See https://github.com/dotnet/sdk/issues/16211.
  -->
  <Target Name="_UpdateMuiFilesAfterNugetRestore" AfterTargets="ResolveNuGetPackageAssets;ResolvePackageAssets">
    <ItemGroup>
      <!-- .NET5 projects and this takes affect after the ResolvePackageAssets target -->
      <_WinUINativeCopyLocalItems Include="@(NativeCopyLocalItems)" Condition="'%(NativeCopyLocalItems.NuGetPackageId)' == 'Microsoft.WinUI' and '%(Extension)' == '.mui' and
                                                                        '%(NativeCopyLocalItems.DestinationSubDirectory)'==''">
        <DestinationSubDirectory>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::MakeRelative($(MSBuildThisFileDirectory)..\runtimes\$(_WinUIRuntimeIdentifier)\native\, %(RootDir)%(Directory)))))</DestinationSubDirectory>
        <DestinationSubPath>$([MSBuild]::EnsureTrailingSlash(
            $([MSBuild]::MakeRelative($(MSBuildThisFileDirectory)..\runtimes\$(_WinUIRuntimeIdentifier)\native\, %(RootDir)%(Directory)))))%(FileName)%(Extension)</DestinationSubPath>
      </_WinUINativeCopyLocalItems>

      <!--
        Placing these items in NativeCopyLocalItems results in a deps.json that the .NET runtime fails to load with error:
          An assembly specified in the application dependencies manifest (WinUIGallery.deps.json) was not found:
            package: 'Microsoft.WinUI', version: '3.0.0-xdev.1'
            path: 'runtimes/win10-x86/native/af-ZA/Microsoft.UI.Xaml.Phone.dll.mui'

        Moving these to RuntimeTargetsCopyLocalItems with the same metadata results in proper placement of files and a deps.json
        that can be loaded.
      -->
      <NativeCopyLocalItems Remove="@(_WinUINativeCopyLocalItems)"/>
      <RuntimeTargetsCopyLocalItems Include="@(_WinUINativeCopyLocalItems)"/>
      <_WinUINativeCopyLocalItems Remove="@(_WinUINativeCopyLocalItems)"/>

      <!--
        This for .NET Native projects only and takes affect after the ResolveNuGetPackageAssets.
        This can be removed once we no longer support .NET Native.
       -->
      <ReferenceCopyLocalPaths Update="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)' == 'Microsoft.WinUI' and '%(Extension)' == '.mui' and
                                                                              '%(ReferenceCopyLocalPaths.DestinationSubDirectory)'==''">
        <DestinationSubDirectory>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::MakeRelative($(MSBuildThisFileDirectory)..\runtimes\$(_WinUIRuntimeIdentifier)\native\, %(RootDir)%(Directory)))))</DestinationSubDirectory>
      </ReferenceCopyLocalPaths>
    </ItemGroup>
  </Target>

  <!-- By default, add CRT package dependencies for UAP apps.  Previously, this was done to satisfy
      CRT linkage for WinUI 3 binaries.  With Hybrid CRT, that's no longer needed, but we retain this behavior 
      to avoid breaking existing projects.  At deployment time, it's very likely that a target device will already
      have Microsoft.VCLibs and Microsoft.VCLibs.Desktop FWPs installed.  But apps can still opt out of referencing
      these FWPs by setting WinUISDKReferences='false'. -->
  <PropertyGroup Condition="'$(WinUISDKReferences)'=='' and '$(TargetPlatformIdentifier)'=='UAP'">
    <WinUISDKReferences>true</WinUISDKReferences>
  </PropertyGroup>

  <ItemGroup Condition="'$(WinUISDKReferences)'=='true' and
                      ('$(OutputType)' == 'Exe' or 
                      '$(OutputType)' == 'AppContainerExe' or 
                      '$(MSBuildProjectExtension)'=='.wapproj' or
                      ('$(OutputType)'=='WinExe' and '$(EnableMsixTooling)'=='true'))">
    <SDKReference Include="Microsoft.VCLibs, Version=14.0" />
    <SDKReference Include="Microsoft.VCLibs.Desktop, Version=14.0" />
    <SDKReference Include="Microsoft.UniversalCRT.Debug, Version=$(TargetPlatformVersion)" Condition="'$(Configuration)' == 'Debug'" />
  </ItemGroup>

  <!-- The CreateWapProjPackageFiles task gets confused by MUI files with the same name but different sub-directory paths,
      stripping out all but one of them. So we need to add their entries manually. -->
  <Target Name="_IncludeMuiFilesInWapProj"
      BeforeTargets="_ConvertItems"
      AfterTargets="_ExpandProjectReferences"
      Condition="'$(MSBuildProjectExtension)' == '.wapproj' and $(EntryPointProjectUniqueName.EndsWith('.vcxproj'))">
    <ItemGroup>
      <!--
        Because we set the TargetPlatformIdentifer to 'UAP' in our Desktop .vcxproj files, the .wapproj thinks these
        are UWP projects and copies the .exe outputs into the root of the appx. Since UWP projects use .pri resources,
        there's a bug where the TargetPath metadata doesn't have the language-specific subfolder. Our desktop projects
        should have TargetPlatformIdentifier be set to Windows, and this would all just work, but there are other
        issues preventing them from building that way.
        -->
      <WapProjPackageFile Include="@(_FilteredNonWapProjProjectOutput)" Condition="'%(Extension)' == '.mui'">
        <CopyToTargetPath>$(OutDir)%(_FilteredNonWapProjProjectOutput.DestinationSubDirectory)%(Filename)%(Extension)</CopyToTargetPath>
      </WapProjPackageFile>
      <UploadWapProjPackageFile Include="@(_FilteredNonWapProjProjectOutput)" Condition="'%(Extension)' == '.mui'">
        <CopyToTargetPath>$(OutDir)%(_FilteredNonWapProjProjectOutput.DestinationSubDirectory)%(Filename)%(Extension)</CopyToTargetPath>
      </UploadWapProjPackageFile>
    </ItemGroup>
  </Target>

  <!-- In order to have the Microsoft.UniversalCRT.Debug SDK reference included in the AppX, we need to
       set IncludeSDKRedistOutputGroup to true. -->
  <Target Name="IncludeSDKRedistOutputGroup" BeforeTargets="GetPackagingOutputs" Condition="('$(OutputType)' == 'AppContainerExe' or '$(MSBuildProjectExtension)'=='.wapproj') and '$(Configuration)' == 'Debug'">
    <PropertyGroup>
      <IncludeSDKRedistOutputGroup>true</IncludeSDKRedistOutputGroup>
    </PropertyGroup>
  </Target>

</Project>
