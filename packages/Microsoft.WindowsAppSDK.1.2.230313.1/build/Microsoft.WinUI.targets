<!--
  Copyright (c) Microsoft Corporation. Licensed under the MIT License
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- PlatformTarget takes precedence over the Platform specified and indicates which platform will actually be targeted -->
    <_WinUIPlatformTarget Condition="'$(_WinUIPlatformTarget)'=='' and '$(PlatformTarget)'!=''">$(PlatformTarget)</_WinUIPlatformTarget>
    <_WinUIPlatformTarget Condition="'$(_WinUIPlatformTarget)'=='' and '$(Platform)'=='Win32'">x86</_WinUIPlatformTarget>
    <_WinUIPlatformTarget Condition="'$(_WinUIPlatformTarget)'==''">$(Platform)</_WinUIPlatformTarget>

    <!--
      Default to blocking use of .NET BinaryFormatter API since it is being deprecated
      (https://github.com/dotnet/designs/blob/main/accepted/2020/better-obsoletion/binaryformatter-obsoletion.md).
    -->
    <EnableUnsafeBinaryFormatterSerialization Condition="'$(EnableUnsafeBinaryFormatterSerialization)' ==''">false</EnableUnsafeBinaryFormatterSerialization>
  </PropertyGroup>

  <Target Name="ValidateWinUIPlatform"
          Condition="'$(_WinUIPlatformTarget)' == 'ARM'"
          BeforeTargets="PrepareForBuild">
    <Error Text="This version of WinUI does not support $(_WinUIPlatformTarget). Set either 'Platform' or 'PlatformTarget' to one of the following: AnyCPU, x86, x64, or arm64." />
  </Target>

  <PropertyGroup>
    <!-- These are needed to pass the correct inputs to the compilexaml tasks -->
    <TargetPlatformMinVersion Condition="'$(TargetPlatformMinVersion)' == ''">$(TargetPlatformVersion)</TargetPlatformMinVersion>
    <WindowsSdkPath Condition="'$(WindowsSdkPath)' == ''">$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSdkLocation("Windows", "10.0"))</WindowsSdkPath>

    <WinUITargetsDirectory Condition="'$(WinUITargetsDirectory)'==''">$(MSBuildThisFileDirectory)</WinUITargetsDirectory>
    <PriGenTargetsDirectory Condition="'$(PriGenTargetsDirectory)'==''">$(WinUITargetsDirectory)</PriGenTargetsDirectory>

    <EnablePriGenTooling Condition="'$(EnablePriGenTooling)'=='' and '$(MSBuildProjectExtension)'!='.wapproj' and '$(WindowsAppContainer)'!='true'">true</EnablePriGenTooling>
    <EnablePriGenTooling Condition="'$(EnablePriGenTooling)'=='' and '$(WindowsAppContainer)'=='true' and '$(UsingMicrosoftNETSdk)'=='true'">true</EnablePriGenTooling>
    <EnablePriGenTooling Condition="'$(EnablePriGenTooling)'=='' or !Exists('$(WinUITargetsDirectory)MrtCore.PriGen.targets')">false</EnablePriGenTooling>

    <DefaultXamlRuntime Condition="'$(UseWpf)'!='true' and '$(DefaultXamlRuntime)'==''">WinUI</DefaultXamlRuntime>

    <!-- 
      Default is to opt-out of Single-project MSIX Packaging. Opt-in via the pre-1.1 property name
      'EnablePreviewMsixTooling' is respected.
    -->
    <EnableMsixTooling Condition="'$(EnablePreviewMsixTooling)'=='true'">true</EnableMsixTooling>
    <EnableMsixTooling Condition="'$(EnableMsixTooling)'==''">false</EnableMsixTooling>
  </PropertyGroup>

  <PropertyGroup Condition="'$(UsingMicrosoftNETSdk)'=='true'">
    <!-- Workaround for https://github.com/microsoft/msbuild/issues/5341 -->
    <MarkPackageReferencesAsExternallyResolved Condition="'$(MarkPackageReferencesAsExternallyResolved)'==''">false</MarkPackageReferencesAsExternallyResolved>

    <EnableDefaultPageItems Condition="'$(EnableDefaultPageItems)' == ''">true</EnableDefaultPageItems>
    <EnableDefaultApplicationDefinition Condition="'$(EnableDefaultApplicationDefinition)' == ''">true</EnableDefaultApplicationDefinition>
    <EnableDefaultAssets Condition="'$(EnableDefaultAssets)' == ''">true</EnableDefaultAssets>
  </PropertyGroup>

  <!--
    Generate error if there are duplicate page items.  The task comes from the .NET SDK, and this
    target follows the pattern in the CheckForDuplicateItems task, where the .NET SDK checks for
    duplicate items for the item types it knows about.
  -->
  <Target Name="CheckForDuplicatePageItems"
          BeforeTargets="_CheckForInvalidConfigurationAndPlatform;CoreCompile"
          DependsOnTargets="CheckForDuplicateItems"
          Condition="'$(UsingMicrosoftNETSdk)' == 'true'">

    <CheckForDuplicateItems
      Items="@(Page)"
      ItemName="Page"
      DefaultItemsEnabled="$(EnableDefaultItems)"
      DefaultItemsOfThisTypeEnabled="$(EnableDefaultPageItems)"
      PropertyNameToDisableDefaultItems="EnableDefaultPageItems"
      MoreInformationLink="$(DefaultItemsMoreInformationLink)"
      ContinueOnError="$(ContinueOnError)">
      <Output TaskParameter="DeduplicatedItems" ItemName="DeduplicatedPageItems" />
    </CheckForDuplicateItems>

    <ItemGroup Condition="'$(DesignTimeBuild)' == 'true' And '@(DeduplicatedPageItems)' != ''">
      <Page Remove="@(Page)" />
      <Page Include="@(DeduplicatedPageItems)" />
    </ItemGroup>
  </Target>

  <Import Project="$(WinUITargetsDirectory)Microsoft.WinUI.References.targets" Condition="'$(UseWPF)'!='true'"/>
  <Import Project="$(WinUITargetsDirectory)Microsoft.WinUI.AppX.targets" Condition="'$(UseWPF)'!='true'"/>
  <Import Project="$(XamlCompilerPropsAndTargetsDirectory)Microsoft.WinUI.NET.Markup.Compiler.targets" Condition="'$(UsingMicrosoftNETSdk)'=='true' and '$(UseWPF)'!='true'" />
  <Import Project="$(XamlCompilerPropsAndTargetsDirectory)Microsoft.UI.Xaml.Markup.Compiler.targets" Condition="Exists('$(XamlCompilerPropsAndTargetsDirectory)Microsoft.UI.Xaml.Markup.Compiler.targets') and '$(MSBuildProjectExtension)'!='.wapproj' and '$(UseWPF)'!='true'"/>
  <Import Project="$(PriGenTargetsDirectory)MrtCore.PriGen.targets" Condition="'$(EnablePriGenTooling)'=='true' AND '$(WindowsAppSDKWinUI)' != 'true'"/>
  <Import Project="$(WinUITargetsDirectory)Microsoft.Build.Msix.targets" Condition="Exists('$(WinUITargetsDirectory)Microsoft.Build.Msix.targets') and '$(EnablePriGenTooling)'!='true'"/>
</Project>
