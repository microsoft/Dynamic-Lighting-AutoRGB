<!--
  Copyright (c) Microsoft Corporation. Licensed under the MIT License
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" InitialTargets="WindowsAppSDKAppLocalVerifyConfiguration">

    <PropertyGroup Condition="'$(WindowsAppSDKFrameworkPackage)'=='false'">
        <!--Microsoft.Common.CurrentVersion.targets initializes many *DependsOn properties,
            so GetCopyToOutputDirectoryItemsDependsOn must be assigned here.-->
        <GetCopyToOutputDirectoryItemsDependsOn>
            $(GetCopyToOutputDirectoryItemsDependsOn);
            AddMicrosoftWindowsAppSDKPayloadFiles
        </GetCopyToOutputDirectoryItemsDependsOn>
    </PropertyGroup>

  <Target Name="MergeWindowsAppSDKManifests"
     Condition="'$(WindowsAppSDKFrameworkPackage)'=='false' and '$(MSBuildProjectExtension)' == '.csproj'"
     BeforeTargets="_SetEmbeddedWin32ManifestProperties"
     Outputs="Microsoft.WindowsAppSdk.manifest">
    <Exec Command="mt -nologo -manifest $(ApplicationManifest) @(Manifest, ' ') -out:Microsoft.WindowsAppSdk.manifest"/>
    <PropertyGroup>
      <ApplicationManifest>Microsoft.WindowsAppSdk.manifest</ApplicationManifest>
    </PropertyGroup>
  </Target>

    <Target Name="WindowsAppSDKAppLocalVerifyConfiguration" Condition="'$(WindowsAppSDKFrameworkPackage)'=='false'">
        <Error Condition="'$(Platform)'=='AnyCPU' OR '$(Platform)'==''" Text="The platform '$(Platform)' is not supported for AppLocal mode."/>
    </Target>

    <Target Name="ExtractMicrosoftWindowsAppSDKMsixFiles"
        Condition="'$(WindowsAppSDKFrameworkPackage)'=='false'"
        DependsOnTargets="ResolveReferences">
        <Error Condition="'$(MicrosoftWindowsAppSDKPackageDir)'==''" Text="MicrosoftWindowsAppSDKPackageDir is not defined. Please update to the latest version of the Windows App SDK."/>
        <PropertyGroup>
            <NativePlatform Condition="'$(Platform)' == 'Win32'">x86</NativePlatform>
            <NativePlatform Condition="'$(Platform)' != 'Win32'">$(Platform)</NativePlatform>
            <MicrosoftWindowsAppSDKMsixContent>$([MSBuild]::NormalizeDirectory('$(ProjectDir)','$(OutDir)'))MsixContent</MicrosoftWindowsAppSDKMsixContent>
        </PropertyGroup>
        <ItemGroup>
            <MicrosoftWindowsAppSDKMsix Include="$([MSBuild]::NormalizeDirectory('$(MicrosoftWindowsAppSDKPackageDir)','tools\Msix\win10-$(NativePlatform)'))Microsoft.WindowsAppSDK.?.?.Msix"/>
        </ItemGroup>
        <Unzip
            SourceFiles="@(MicrosoftWindowsAppSDKMsix)"
            DestinationFolder="$(MicrosoftWindowsAppSDKMsixContent)"
            SkipUnchangedFiles="true"
            OverwriteReadOnlyFiles="true" />
        <!--Reverse the rename of Microsoft.UI.Xaml.Controls.pri to resources.pri to enable use of both from the app -->
        <Move SourceFiles="$(MicrosoftWindowsAppSDKMsixContent)\resources.pri" DestinationFiles="$(MicrosoftWindowsAppSDKMsixContent)\Microsoft.UI.Xaml.Controls.pri"/>
        <!--For single project packaged apps, ensure that Project Reunion resources are merged-->
        <ItemGroup Condition="'$(MSBuildProjectExtension)' != '.wapproj'">
            <!--For single project packaged apps, ensure that Project Reunion resources are merged-->
            <_PriFile Condition="'$(WindowsAppSDKSelfContained)'!='true'" Include="$(MicrosoftWindowsAppSDKMsixContent)\Microsoft.UI.Xaml.Controls.pri"/>
            <!--For self-contained unpackaged apps, ensure that Project Reunion resources are merged-->
            <_PriFile Condition="'$(WindowsAppSDKSelfContained)'=='true'" Include="$([MSBuild]::NormalizeDirectory('$(ProjectDir)','$(OutDir)'))Microsoft.UI.Xaml.Controls.pri"/>
        </ItemGroup>
    </Target>

    <Target Name="AddMicrosoftWindowsAppSDKPayloadFiles"
        Condition="'$(WindowsAppSDKFrameworkPackage)'=='false'"
        DependsOnTargets="ExtractMicrosoftWindowsAppSDKMsixFiles" >
        <ItemGroup>
            <MicrosoftWindowsAppSDKFiles Include="$(MicrosoftWindowsAppSDKMsixContent)\*.dll"/>
            <MicrosoftWindowsAppSDKFiles Include="$(MicrosoftWindowsAppSDKMsixContent)\*.pri"/>
            <MicrosoftWindowsAppSDKFiles Include="$(MicrosoftWindowsAppSDKMsixContent)\*-*\*"/>
            <MicrosoftWindowsAppSDKFiles Include="$(MicrosoftWindowsAppSDKMsixContent)\*.winmd" Condition="!Exists('$(PackagedManifest)')"/>
            <AllItemsFullPathWithTargetPath Condition="Exists('$(PackagedManifest)')" Include="@(MicrosoftWindowsAppSDKFiles)">
                <TargetPath>$([System.String]::Copy('%(Identity)').Replace('$(MicrosoftWindowsAppSDKMsixContent)\', ''))</TargetPath>
            </AllItemsFullPathWithTargetPath>
        </ItemGroup>
        <!--For self-contained unpackaged apps, select binaries must live next to executable-->
        <Move Condition="!Exists('$(PackagedManifest)')" SourceFiles="@(MicrosoftWindowsAppSDKFiles)" DestinationFolder="$([MSBuild]::NormalizeDirectory('$(ProjectDir)','$(OutDir)'))%(RecursiveDir)" />
    </Target>

    <Target Name="AddMicrosoftWindowsAppSDKMsixManifestElements"
        Condition="'$(WindowsAppSDKFrameworkPackage)'=='false'"
        BeforeTargets="_ValidateAppxManifest"
        AfterTargets="_GenerateDesktopBridgeAppxManifest"
        DependsOnTargets="_GenerateDesktopBridgeAppxManifest;ExtractMicrosoftWindowsAppSDKMsixFiles"
        Inputs="$(FinalAppxManifestName)"
        Outputs="$(FinalAppxManifestName).inapp.incremental" >

        <!--Copy framework package msix manifest activatable class elements-->
        <XmlPeek XmlInputPath="$(MicrosoftWindowsAppSDKMsixContent)\AppxManifest.xml"
            Query="/ns:Package/ns:Extensions/ns:Extension"
            Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/appx/manifest/foundation/windows10' /&gt;">
            <Output TaskParameter="Result" ItemName="MicrosoftWindowsAppSDKExtensions" />
        </XmlPeek>

        <!--Read app's current extensions element-->
        <XmlPeek XmlInputPath="$(FinalAppxManifestName)"
            Query="/ns:Package/ns:Extensions/ns:Extension"
            Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/appx/manifest/foundation/windows10' /&gt;">
            <Output TaskParameter="Result" ItemName="AppExtensions" />
        </XmlPeek>

        <!--If app manifest already contains any Windows App SDK entries, skip the update-->
        <ItemGroup Condition="'@(AppExtensions)'!=''">
            <FilteredAppExtensions Include="@(AppExtensions)" Exclude="@(MicrosoftWindowsAppSDKExtensions)" />
        </ItemGroup>
        <PropertyGroup>
            <AlreadyContainsExtensions Condition="'@(FilteredAppExtensions)'!='@(AppExtensions)'">true</AlreadyContainsExtensions>
        </PropertyGroup>
        
        <!--XmlPoke can only replace a single element. If the app has an Extensions element, append to it.
        If the app has no Extensions element, create one and append that to the Package's other elements.-->
        <PropertyGroup Condition="'$(AlreadyContainsExtensions)'!='true' and '@(AppExtensions)'!=''">
            <XmlPokeQuery>/ns:Package/ns:Extensions</XmlPokeQuery>
            <XmlPokeContent>
                @(AppExtensions->'%(Identity)','&#x0d;&#x0a;')
                @(MicrosoftWindowsAppSDKExtensions->'%(Identity)','&#x0d;&#x0a;')
            </XmlPokeContent>
        </PropertyGroup>
        <XmlPeek Condition="'$(AlreadyContainsExtensions)'!='true' and '@(AppExtensions)'==''"
            XmlInputPath="$(FinalAppxManifestName)"
            Query="/ns:Package/*"
            Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/appx/manifest/foundation/windows10' /&gt;">
            <Output TaskParameter="Result" ItemName="AppPackageElements" />
        </XmlPeek>
        <PropertyGroup Condition="'$(AlreadyContainsExtensions)'!='true' and '@(AppExtensions)'==''">
            <XmlPokeQuery>/ns:Package</XmlPokeQuery>
            <XmlPokeContent>
                @(AppPackageElements->'%(Identity)','&#x0d;&#x0a;')
                &lt;Extensions&gt;
                    @(MicrosoftWindowsAppSDKExtensions->'%(Identity)','&#x0d;&#x0a;')
                &lt;/Extensions&gt;
            </XmlPokeContent>
        </PropertyGroup>
        <!--Append Windows App SDK extensions to existing app extensions,
        or append new Extensions element to app's existing package elements-->
        <XmlPoke XmlInputPath="$(FinalAppxManifestName)"
            Condition="'$(AlreadyContainsExtensions)'!='true'"
            Query="$(XmlPokeQuery)"
            Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/appx/manifest/foundation/windows10' /&gt;"
            Value="$(XmlPokeContent)" />

        <Touch
           Files="$(FinalAppxManifestName).inapp.incremental"
           AlwaysCreate="true" />
    </Target>

</Project>
